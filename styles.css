*, *::after, *::before {
    box-sizing: border-box;
}

:root {
    --cell-size: 150px;
    --mark-size: calc(var(--cell-size) * .8);
}

body {
    margin: 0;
    background: black;
}

.board {
    width: 100px;
    height: 100px;
    position: absolute;
    top: 300px;
    left: 725px;
    display: grid;
    justify-content: center;
    align-content: center;
    align-items: center;
    grid-template-columns: repeat(3, auto);
}

.cell {
    width: var(--cell-size);
    height: var(--cell-size);
    background-color: rgb(4, 4, 50);
    border: 1px solid white;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    cursor: pointer;
}


/* removing the outer border so only the border lines inside the grid remain */
.cell:first-child,
.cell:nth-child(2),
.cell:nth-child(3) {
    border-top: none;
}

.cell:nth-child(3n+1) {
    border-left: none;
}

.cell:nth-child(3n+3) {
    border-right: none;
}

.cell:last-child,
.cell:nth-child(8),
.cell:nth-child(7) {
    border-bottom: none;
}

/* creating the X's */
/* allow the hover effect only on an empty call i.e cell does not contain an X or O */
.board.x .cell:not(.x):not(.circle):hover::before, 
.board.x .cell:not(.x):not(.circle):hover::after,
.board.circle .cell:not(.x):not(.circle):hover::before,
.board.circle .cell:not(.x):not(.circle):hover::after {
    background-color: rgb(152, 214, 233, 0.4);
}

.cell.circle::before {
    background-color: rgb(17, 199, 17);
}
.cell.circle::after {
    background-color: rgb(4, 4, 50);
}

.cell.x::before,
.cell.x::after {
    background-color: rgb(242, 152, 16);
}

.cell.x::before,
.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::before, 
.board.x .cell:not(.x):not(.circle):hover::after {
    content: '';
    position: absolute;
    width: calc(var(--mark-size) * .15);
    height: var(--mark-size);
}

.cell.x::before,
.board.x .cell:not(.x):not(.circle):hover::before {
    transform: rotate(45deg);
}

.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::after {
    transform: rotate(-45deg);
}

/* creating the O's */
.cell.circle::before,
.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::before,
.board.circle .cell:not(.x):not(.circle):hover::after {
    content: '';
    position: absolute;
    border-radius: 50%;
}

.cell.circle::before,
.board.circle .cell:not(.x):not(.circle):hover::before {
    width: var(--mark-size);
    height: var(--mark-size);
    
}

.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::after {
    width: calc(var(--mark-size) * .7);
    height: calc(var(--mark-size) * .7);
}

/* if a cell already has an X or O, the cursor should not show */
.cell.x,
.cell.circle{
    cursor: not-allowed;
}

/* we want the winning/draw message and restart button always at the center of the screen */
.winning-message {
    display: none; /* the message should not display by default, it should display only when the winning-message.show class is called */
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(255, 255, 255, 0.75);
    justify-content: center;
    align-items: center;
    color: rgb(227, 28, 28);
    font-size: 8rem;
    flex-direction: column;
}

.winning-message button {
    font-size: 3rem;
    color: white;
    background-color: black;
    border: 5px solid white;
    padding: 0.25em .5em;
    cursor: pointer;
}

.winning-message button:hover {
    background-color: white;
    color: black;
    border: 5px solid black;
}

.winning-message.show {
    display: flex;
}

